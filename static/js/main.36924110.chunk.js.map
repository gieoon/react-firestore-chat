{"version":3,"sources":["../../src/language.js","../../src/helpers.js","../../src/config.js","../../src/index.js","App.js","index.js"],"names":["key","d","ENGLISH","CHINESE","convertTimestampToDate","timestamp","Date","parseInt","DB_ROOT_CHAT","DB_ROOT_USERS","DB_MESSAGES","DB_CHATS","db","Chat","forwardRef","props","ref","msgRef","useRef","useState","chatFormRef","useEffect","firebase","getUserChatMessages","scrollToBottom","docs","change","console","listenToChatFromId","chatPath","chatId","doc","otherParticipantId","getOtherParticipantValue","getUserDetailsFromId","userDetails","tusers","users","id","setUsers","Object","setSelectedUser","setCurrentChatId","snapshot","messages","setAllMessages","window","chatArea","document","styles","a","err","obj","useImperativeHandle","createNewChatMessage","participant1","participant2","participant1UnreadIndex","participant2UnreadIndex","style","backgroundColor","color","textColor","className","onClick","chat_wrapper_inner","chat_wrapper_users","user","index","e","component","userSelected","src","alt","username","userId","selectedUser","allMessages","selectedUserId","currentChatId","MessageArea","ma_message_wrapper","ma_input_area","f_sendMsg","txt","text","author","createdDate","ChatHeader","href","ma_header_link","ma_header_area","ma_header_username","ma_header_nickname","ma_header_location","ChatArea","lastDay","ma_message_area","chatHeader","chatHeader_startOfChat","get","message","index1","chatBoxTimeSeparator","m","React","constructor","super","this","unreadIndex","loading","render","state","chatBox","chatBox_msg_time","String","convertTimestampToTime","b","el","onFocus","onBlur","placeholder","ChatBottom","chatBottom","msgArea_contents_inner_button_container","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","chatRef","log","current","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.36924110.chunk.js","sourcesContent":["const DEFAULT_LANGUAGE = 'ENGLISH';\n\nexport default (key) => d[key][DEFAULT_LANGUAGE];\n\nconst d = {\n    'C_SEND': {\n        ENGLISH: \"Send\",\n        CHINESE: \"Send\", //TODO\n    },\n    'START_OF_CHAT': {\n        ENGLISH: 'This is the start of your chat with ',\n    }\n}","export const convertTimestampToTime = (timestamp) => {\n    if(!timestamp) return \"just now\"; \n    // if(!timestamp) timestamp = Date.now();\n    // console.log(new Date(parseInt(timestamp + \"000\")));\n    const d = (new Date(parseInt(timestamp + \"000\"))).toString().split(\" \")[4].split(\":\");\n    return d[0] + \":\" + d[1];\n};\n\nexport const convertTimestampToDate = (timestamp) => {\n    const d = (new Date(parseInt(timestamp + \"000\"))).toString().split(\" \");\n    return d[1] + \" \" + d[2];\n};","const DB_VERSION = 5;\nexport const DB_ROOT_CHAT = \"Chats\" + DB_VERSION.toString();\nexport const DB_ROOT_USERS = \"Users\" + DB_VERSION.toString();\nexport const DB_MESSAGES = \"Messages\" + DB_VERSION.toString();\nexport const DB_CHATS = \"Chats\" + DB_VERSION.toString();","import React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from 'react'\nimport './index.scss';\nimport styles from './styles.module.css'\nimport firebase from  'firebase';\nimport get from './language.js';\nimport {convertTimestampToTime, convertTimestampToDate} from './helpers.js';\n// import {Router, Link} from 'react-router-dom';\nimport {\n  DB_ROOT_USERS,\n  DB_ROOT_CHAT,\n  DB_MESSAGES,\n  DB_CHATS,\n} from './config.js';\n\nvar db = {};\n\n// React.forwardRef\nconst Chat = forwardRef((props, ref) => {\n// const Chat = ({ \n  //   firebaseConfig,\n  //   userId,\n  //   textColor,\n  //   backgroundColor,\n  //   text,\n  // }) => {\n    // console.log(\"props: \", props);\n    const msgRef = useRef();\n\n    const [expand, setExpand] = useState(false);\n\n    // const [db, setDb] = useState({});\n\n    // Dictionary of all chat messages\n    const [allMessages, setAllMessages] = useState({});\n\n    // TODO set to the first\n    const [selectedUserId, setSelectedUserId] = useState(\"\");\n\n    const [selectedUser, setSelectedUser] = useState({});\n\n    const [currentChatId, setCurrentChatId] = useState(\"\");\n\n    const [users, setUsers] = useState({});\n\n    const chatFormRef = useRef(null);\n\n    useEffect(()=>{\n      firebase.initializeApp(props.firebaseConfig);\n      db = firebase.firestore();\n      // setDb(tdb)\n      getUserChatMessages(db);\n    },[]);\n\n    useEffect(()=>{\n      scrollToBottom();\n    }, [allMessages])\n\n    const getUserChatMessages = (db) => {\n      return db.collection(DB_ROOT_USERS)\n        .doc(props.userId)\n        .collection(DB_CHATS)\n        .onSnapshot(docs => {\n          docs.docChanges().forEach((change)=>{\n            if(change.type === \"added\"){\n              console.log(\"detected user's chat: \", change.doc.id);\n              listenToChatFromId(change.doc.get('chatPath'), db)\n            } else if(change.type === \"modified\"){\n              console.log('detected modified chat: ', change.doc.id);\n              // listenToChatFromId(doc.get('chatPath'))\n            }\n          })\n        })\n    }\n\n    const listenToChatFromId = (chatPath, db) => {\n      // console.log('chatPath: ', chatPath);\n      const chatId = chatPath.id;\n      db.doc(chatPath.path).onSnapshot(doc => {\n        // console.log(\"chat details: \", doc.id, doc.data());\n        const otherParticipantId = getOtherParticipantValue(doc.data());\n        // console.log(\"otherParticipantId: \", otherParticipantId)\n        getUserDetailsFromId(otherParticipantId, db).then((userDetails)=>{\n          // const tusers = [...users]; // Need to copy object, = is the same reference\n          const tusers = {...users}; // Need to copy object, = is the same reference\n          // TODO organize user details by date of last message\n          // console.log('tusers: ', tusers);\n          // console.log('userDetails: ', userDetails);\n          // tusers.push(userDetails);\n          tusers[otherParticipantId] = {...userDetails, chatId: doc.id };\n\n          setUsers(tusers);\n          //TODO set this to latest message date user\n          if(!Object.keys(selectedUser).length)\n            setSelectedUser({...userDetails, chatId: doc.id});\n            // console.log(doc.id);\n            setCurrentChatId(doc.id);\n        })\n      })\n\n      // Listen for changes in Messages\n      db.doc(chatPath.path)\n        .collection(DB_MESSAGES)\n        .orderBy('createdDate','asc')\n        .onSnapshot(snapshot => {\n          snapshot.docChanges().forEach((change) => {\n            if(change.type === \"added\" || change.type === \"modified\"){ // || change.type === \"modified\"  \n              if(!change.doc.get('createdDate'))\n                return;\n              console.log('detected message: ', change.type, change.doc.id, change.doc.data());\n              const messages = allMessages;\n\n            // } else if(change.type === \"modified\"){\n              // console.log('detected modified doc: ', change.doc.id);\n              // const messages = {...allMessages}; // This doesn't work, is not triggered as new object\n              // console.log(\"allMessages, messages: \", allMessages, messages);\n              if(!messages[chatId]){\n                messages[chatId] = [];\n              }\n              messages[chatId].push(change.doc.data());\n              setAllMessages({...messages}); // Force as new object\n              // console.log('messages: ', messages, allMessages);\n              // scrollToBottom();\n            }\n          });\n        })\n    }\n\n    const scrollToBottom = () => {\n      // console.log('scrolling');\n      \n      window.requestAnimationFrame(function() {\n        const chatArea = document.getElementById(styles.ma_message_area);\n        // console.log('chatArea: ', chatArea)\n        window.setTimeout(()=>{\n          // if(!chatArea) return;\n          chatArea.scrollTop = chatArea.scrollHeight;\n          // console.log('scrolled: ', chatArea.scrollTop, chatArea.scrollHeight)\n        }, 500);\n      });\n    }\n\n    const getUserDetailsFromId = async (id, db) => {\n        return db.collection(DB_ROOT_USERS)\n          .doc(id)\n          .get()\n          .then(doc => {\n            // console.log(doc.data())\n            return doc.data();\n          })\n          .catch(err => console.error(\"Error retrieving user details: \", err));\n    }\n\n    const getOtherParticipantValue = (obj) => {\n      if(obj.participant1 === props.userId) return obj.participant2;\n      else return obj.participant1;\n    }\n\n    // Functions available to outside methods via ref\n    useImperativeHandle(ref, () => ({\n      // createNewChatMessage();\n      // console.log(ref);\n      createNewChatMessage\n      // return {};\n    })\n    );\n\n    const createNewChatMessage = (participant1, participant2) => {\n      console.log('creating new chat message');\n      // if(!Object.keys(db).length) return;\n      db.collection(DB_ROOT_CHAT)\n        .add({\n          participant1: participant1,\n          participant2: participant2,\n          participant1UnreadIndex: 1,\n          participant2UnreadIndex: 1,\n        })\n        // Save to own id\n        .then((id)=>{\n          db.collection(DB_ROOT_USERS)\n            .doc(participant1)\n            .collection(DB_CHATS)\n            .add({\n              chatPath: id,\n              // chatPath: firebase.firestore.FieldValue.arrayUnion(id)\n            })\n\n          db.collection(DB_ROOT_USERS)\n            .doc(participant2)\n            .collection(DB_CHATS)\n            .add({\n              chatPath: id,\n              // chatPath: firebase.firestore.FieldValue.arrayUnion(id)\n            })\n          \n        })\n        .catch(err => console.error(\"Error creating new chat messsage: \", err))\n    }\n\n    // Set unreadIndex to 0\n    // 1. Identify which participant type this is\n    const readMessage = (chatId, msgId) => {\n      db.collection(DB_ROOT_CHAT)\n        .doc(chatId)\n    }\n\n    const userSelected = (e, component, user) => {\n      console.log(\"user selected: \", e, component, user);\n      setSelectedUser(user);\n      setCurrentChatId(user.chatId);\n    }\n    \n    // console.log('users: ', users);\n    return <div \n        style={{\n          backgroundColor: props.backgroundColor,\n          color: props.textColor,\n        }}\n        className={styles.chat_wrapper}\n        onClick={()=>{}}\n      >\n        <div id={styles.chat_wrapper_inner}>\n          <div id={styles.chat_wrapper_users}>\n            { \n              Object.values(users).map((user, index) => (\n                <div key={\"chat-user-\" + index} className={styles.chat_user} onClick={(e)=>{userSelected(e, this, user)}}>\n                  <img src={user.photoUrl} alt=\"\" />\n                  <span className={styles.username}>{user.username}</span>\n                </div>\n              ))\n            }\n          </div>\n          <MessageArea \n            userId={props.userId} \n            selectedUser={selectedUser} \n            allMessages={allMessages} \n            msgRef={msgRef} \n            styles={styles} \n            selectedUserId={selectedUserId} \n            chatFormRef={chatFormRef} \n            chatId={currentChatId} />\n        </div>\n      </div> \n  // }\n})\n\nfunction MessageArea({\n  userId,\n  selectedUser,\n  allMessages,\n  styles,\n  chatFormRef,\n  chatId\n}){\n\n  const f_sendMsg = () => {\n    console.log(\"chatid: \", chatId);\n    // return;\n    var txt = chatFormRef.current.firstChild.value;\n    // console.log('sending message: ', chatFormRef.current.firstChild.value);\n    db.collection(DB_ROOT_CHAT)\n      .doc(chatId)\n      .collection(DB_MESSAGES)\n      // .doc(msgId)\n      .add({\n        text: txt,\n        author: userId,\n        createdDate: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .then(()=>{\n        console.log('Message sent successfully')\n        chatFormRef.current.firstChild.value = \"\";\n      })\n      .catch(err => console.error(\"Error sending message\"));\n    \n  }\n  // console.log(allMessages);\n  return(\n    <div id={styles.ma_message_wrapper}>\n      <ChatHeader selectedUser={selectedUser} />\n      <ChatArea messages={allMessages[selectedUser.chatId] || []} selectedUser={selectedUser} userId={userId} />\n      \n      <div id={styles.ma_input_area}>\n        <ChatForm chatFormRef={chatFormRef} />\n        <ChatBottom userId={userId} selectedUser={selectedUser} f_sendMsg={f_sendMsg} chatFormRef={chatFormRef} />\n      </div>\n    </div>\n  )\n}\n\nfunction ChatHeader({\n  selectedUser,\n}){\n  return <a href={'../user/' + selectedUser.nickname} id={styles.ma_header_link}>          \n    <div id={styles.ma_header_area}>\n      <span id={styles.ma_header_username}>{selectedUser.username}</span>\n      <span id={styles.ma_header_nickname}>{selectedUser.nickname}</span>\n      <br/>\n      <span id={styles.ma_header_location}>{selectedUser.location}</span>\n    </div>\n  </a>\n}\n\nfunction ChatArea({\n  messages,\n  selectedUser,\n  userId,\n}){\n  // console.log(Array.isArray(messages))\n  // console.log(messages.length)\n  var lastDay = \"\";\n\n  return <div \n        // className=\"chatContainer\"\n        id={styles.ma_message_area}\n      >\n      {!messages.length || 1\n        ? <div className={styles.chatHeader} >\n          {/* <hr style={{borderTopWidth:\"2px\",borderColor:\"#EB2764\",backgroundColor:\"#EB2764\",color:\"#EB2764\"}}/> */}\n          <span className={styles.chatHeader_startOfChat}>{get('START_OF_CHAT')} {selectedUser.username}</span>\n        </div>\n        : \"\"\n      }  \n      <div className={\"chatArea\"}>\n          {\n              messages.map((message, index1) => (\n                  <div key={index1}>\n                      {/* {   messages.length ?\n                          <span className=\"chatBoxTimeSeparator\">\n                              {\n                                  // The first timestamp is indicative of the first chat time, so we set a date from the first\n                                  convertTimestampToDate(messages[0].timestamp) \n                              }\n                          </span>\n                          : \"\"\n                      } */}\n                      { lastDay !== convertTimestampToDate(message.createdDate?.seconds)\n                        ? <span className={styles.chatBoxTimeSeparator}>\n                          {/* {lastDay = convertTimestampToDate(message.createdDate?.seconds) } */}\n                          {\n                              // If the day is different, this is indicative of a new day and print it and assign to a variable. \n                              // React interprets this as saving a variable but also printing it\n                              lastDay = convertTimestampToDate(message.createdDate?.seconds) \n                          }\n                        </span>\n                        : \"\"\n                      }\n                        <ChatMessage \n                            // unreadIndex={index1 === this.state.unreadMsgDayIndex && index2 === this.state.unreadMsgIndex}\n                            userId={userId}\n                            m={message} \n                            selectedUser={selectedUser} \n                            index={index1} \n                            key={\"chat-message-\" + index1} />\n                    ))\n                  </div>\n              ))\n          }\n      </div>\n  </div>\n}\n\n\nclass ChatMessage extends React.Component {\n  constructor(props){\n      super(props);\n      this.state = {\n          userId: props.userId,\n          m:  props.m,\n          selectedUser: props.selectedUser,\n          index: props.index,\n          unreadIndex: 0,//props.unreadIndex,\n          loading: false // TODO dynamically set this, display text from the start and update its loading state based on dynamically assigned refs, or targeting DOM ID\n      }\n  }\n\n  render(){\n      // console.log('printing message: ', this.props.m, this.props.userId);\n      return(\n          <div>\n              <div key={this.state.index} className={`${styles.chatBox} ${(this.props.m.author === this.props.userId ? styles.self_send : \"\")}`}>\n                  <span className={this.state.loading ? styles.soft : \"\"}>{this.props.m.text} </span>\n                  {\n                      this.state.loading \n                      ? \"\"\n                      : <span className={styles.chatBox_msg_time}>\n                          {\" \" + String.fromCharCode(\"0x2022\") + \" \"}\n                          {convertTimestampToTime(this.props.m.createdDate?.seconds)}\n                      </span>\n                  }\n                  <span className={\"chat-unread \" + (this.props.unreadIndex ? \" chat-unreadTag \" : \"\")}></span>\n              </div>\n          </div>\n      );\n  }\n}\n\n\nclass ChatForm extends React.Component {\n  constructor(props){\n      super(props);\n      this.state = {\n          chatFormRef: props.chatFormRef\n      }\n  }\n  \n  chatFormClicked = (b) => {\n      // const el = document.getElementsByClassName(\"chatForm\")[0];\n      const el = this.props.chatFormRef.current;\n      //if(el.classList.contains(\"active\")){\n      if(!b){\n          el.classList.remove(styles.active);\n      } else {\n          el.classList.add(styles.active);\n      }\n  }\n\n  render(){\n      return <div className={`${styles.chatForm}`}\n          ref={this.props.chatFormRef}\n\n          onFocus={()=>{this.chatFormClicked(true)}}\n          onBlur={()=>{this.chatFormClicked(false)}}>\n          {/* <textarea ref={this.props.chatFormRef} className=\"chatForm-inner\"  */}\n          <textarea className={`${styles.chatForm_inner}`}\n              //defaultValue=\"Write your message here...\" \n              placeholder=\"Write your message here...\">\n          </textarea>\n      </div>\n  }   \n}\n\nfunction ChatBottom(props){\n  return <div className={styles.chatBottom}>\n      <div style={{color:\"black\"}}>feature1, feature2, feature3, Paid feature1, Paid feature2</div>\n      <div className={styles.msgArea_contents_inner_button_container}>\n          <div\n              id={styles.ANALYTICS_sendChatMessage} \n              className={styles.msgArea_contents_inner_button}\n              onClick={()=>{\n                  props.f_sendMsg()}}\n          >{get('C_SEND')}</div>\n      </div>\n  </div>\n}\n\nexport default Chat;","import React, { useRef } from 'react'\n\nimport Chat from 'react-firestore-chat'\nimport 'react-firestore-chat/dist/index.css'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDZOnfAFgXvrABedijrzR42vjhA-Strl1A\",\n  authDomain: \"speek-5d61f.firebaseapp.com\",\n  databaseURL: \"https://speek-5d61f.firebaseio.com\",\n  projectId: \"speek-5d61f\",\n  storageBucket: \"speek-5d61f.appspot.com\",\n  messagingSenderId: \"892105399363\",\n  appId: \"1:892105399363:web:9cc25b318654e31c8a08f6\",\n  measurementId: \"G-J9322EP1HD\"\n}\nconst App = () => {\n  const chatRef = React.useRef(); //createRef(); //useRef();\n  \n  return <div>\n    <div onClick={()=>{\n      console.log(chatRef);\n      chatRef.current.createNewChatMessage(\"BQPCTducNBepxzqkVLXICJfvtg12\",\"TmyvTarXsSMzkStJPycd69KYlj03\");\n    }}>\n      New Message\n    </div>\n    <Chat \n      firebaseConfig={firebaseConfig}\n      userId=\"BQPCTducNBepxzqkVLXICJfvtg12\"\n      textColor=\"white\"\n      backgroundColor=\"#EB2764\"\n      ref={chatRef}\n    />\n  </div>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}